@page "/mazerace"
@using MazeRaceCore.Service
@using MazeRaceCore.Core.GameModes
@using MazeRaceCore.Entity
@using MazeRaceCore.Core
@using System.Text
@inject ScoreServiceEf _scoreService


<div>
    <input  type="radio" name="Mode" value="endless" checked="checked" @onclick='() => { _mode = "Endless"; }'/>
    <label>Endless</label>
    <input  type="radio" name="Mode" value="rush" @onclick='() => { _mode = "Rush"; }'/>
    <label>Rush</label>
    <input  type="radio" name="Mode" value="custom" @onclick='() => { _mode = "Custom"; }'/>
    <label>Custom</label>
</div>


<div>
    @if (_gameMode != null && (_gameMode.GetType() == typeof(Endless) || _gameMode.GetType() == typeof(Rush)))
    {
        <p>@_time</p>
        <p>Score : @_score.ToString()</p>
    }

</div>


@if (_mode == "Custom")
{
    <div>
        <select name="racerCountSelect" id="racerCount" @bind="_racerCount">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
        </select>


        <select name="levelCountSelect" id="levelCount" @bind="_levelCount">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
        </select>
        
        
        @if(_levelCount > 0){
        <select name="mazeType" id="mazeType" @onchange="e => { algos[0] = e.Value.ToString(); }">
            <option value="aldousbroder">Aldous-Broder</option>
            <option value="backtracker"> Backtracker</option>
            <option value="binarytree">Binary Tree</option>
            <option value="prim">Prim</option>
            <option value="growingtree">Growing Tree</option>
            <option value="sidewinder">Sidewinder</option>
        </select>
        }
        
        @if(_levelCount > 1){
        <select name="mazeType" id="mazeType" @onchange="e => { algos[1] = e.Value.ToString(); }">
            <option value="aldousbroder">Aldous-Broder</option>
            <option value="backtracker"> Backtracker</option>
            <option value="binarytree">Binary Tree</option>
            <option value="prim">Prim</option>
            <option value="growingtree">Growing Tree</option>
            <option value="sidewinder">Sidewinder</option>
        </select>
        }
        
        @if(_levelCount > 2){
        <select name="mazeType" id="mazeType" @onchange="e => { algos[2] = e.Value.ToString(); }">
            <option value="aldousbroder">Aldous-Broder</option>
            <option value="backtracker"> Backtracker</option>
            <option value="binarytree">Binary Tree</option>
            <option value="prim">Prim</option>
            <option value="growingtree">Growing Tree</option>
            <option value="sidewinder">Sidewinder</option>
        </select>
        }
        
        @if(_levelCount > 3){
        <select name="mazeType" id="mazeType" @onchange="e => { algos[3] = e.Value.ToString(); }">
            <option value="aldousbroder">Aldous-Broder</option>
            <option value="backtracker"> Backtracker</option>
            <option value="binarytree">Binary Tree</option>
            <option value="prim">Prim</option>
            <option value="growingtree">Growing Tree</option>
            <option value="sidewinder">Sidewinder</option>
        </select>
        }
    </div>
}


<div class="col">
    <div class="maze-container" tabindex="0" @onkeydown="OnKeyDown">
        @((MarkupString) _mazeRender)
    </div>
</div>



<div class="row controls">
    <button class="btn btn-primary" @onclick="() => {startGame();_mazeRender = RenderGame(_gameMode); StateHasChanged(); }">Start Game</button>
</div>


<div class="row">
    <div class="controls">
        <button class="btn btn-primary" @onclick="() =>{TryToMove(Walls.Left); StateHasChanged(); }">←</button>
        <button class="btn btn-primary" @onclick="() =>{TryToMove(Walls.Right); StateHasChanged(); }">→</button>
        <button class="btn btn-primary" @onclick="() =>{TryToMove(Walls.Top); StateHasChanged(); }">↑</button>
        <button class="btn btn-primary" @onclick="() =>{TryToMove(Walls.Bottom); StateHasChanged(); }">↓</button>
    </div>
</div>


@switch (_mode)
{
    case "Endless":
        <div class="alert alert-dismissible alert-secondary">
            <strong>Rules:</strong>
            You are the blue square. Navigate the maze to make it to the end which is represented by black square.
            Keyboard inputs (←, →, ↑, ↓) are supported if you <i>click on the board</i>.
        </div>
        break;


    case "Custom":
        <div class="alert alert-dismissible alert-secondary">
            <strong>Rules:</strong>
            You are the blue square. Navigate the maze to make it to the end in the bottom right.
            You can customize your maze with layers, algorithms and number of player.
            Keyboard inputs (←, →, ↑, ↓) are supported if you <i>click on the board</i>.
        </div>
        break;


    case "Rush":
        <div class="alert alert-dismissible alert-secondary">
            <strong>Rules:</strong>
            You are the blue square, and always start in the top left. Navigate the maze to make it to the end.
            You have 20 seconds.Score is calculated on the distance from end of the maze.
            Keyboard inputs (←, →, ↑, ↓) are supported if you <i>click on the board</i>.
        </div>
        break;
}


<style>
    .controls { margin-top: 1rem; }

    .controls button {
        margin-bottom: .5rem;
        margin-right: .5rem;
    }
</style>


@code
{
    //TODO oprav async

    string _mode = "Endless";
    GameMode _gameMode;
    string _mazeRender = string.Empty;

    string _time = string.Empty;
    int _score;

    int _racerCount;
    int _levelCount;
    String[] algos;


    protected override void OnInitialized()
    {
        _mazeRender = RenderMaze(MazeManager.getUnconnectedMaze(13));
        algos = new[] {"backtracker", "backtracker", "backtracker", "backtracker"};
    }


    void OnKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft":
                TryToMove(Walls.Left);
                break;
            case "ArrowRight":
                TryToMove(Walls.Right);
                break;
            case "ArrowUp":
                TryToMove(Walls.Top);
                break;
            case "ArrowDown":
                TryToMove(Walls.Bottom);
                break;
            default:
                return;
        }
    }


    void TryToMove(Walls move)
    {
        if (_gameMode != null && !_gameMode.IsFinished() && _gameMode.MovePlayer(move, "Player"))
        {
            _gameMode.UpdateGame("Player");
            _mazeRender = RenderGame(_gameMode);
        }
    }


    void startGame()
    {
        switch (_mode)
        {
            case "Endless":
                _gameMode = new Endless();
                RunGame();
                break;

            case "Rush":
                _gameMode = new Rush();
                RunGame();
                break;

            case "Custom":
                _gameMode = new Custom(13, _racerCount, _levelCount,algos);
                RunGame();
                break;

            default:
                return;
        }
    }


    async Task RunGame()
    {
        while (!_gameMode.IsFinished())
        {
            if (_gameMode.GetType() == typeof(Endless))
            {
                var span = new TimeSpan(0, 0, ((Endless) _gameMode).Counter);
                _time = $"{(int) span.TotalMinutes}:{span.Seconds:00}";
                _score = ((Endless) _gameMode).Score;
            }

            if (_gameMode.GetType() == typeof(Rush))
            {
                var span = new TimeSpan(0, 0, ((Rush) _gameMode).Counter);
                _time = $"{(int) span.TotalMinutes}:{span.Seconds:00}";
                _score = ((Rush) _gameMode).Score;
            }


            if (_gameMode.GetType() == typeof(Custom))
            {
                ((Custom) _gameMode).AdvanceAi();
            }

            _mazeRender = RenderGame(_gameMode);
            StateHasChanged();
            await Task.Delay(500);
        }


        if (_gameMode.GetType() == typeof(Endless) || _gameMode.GetType() == typeof(Rush))
        {
            var score = new Score("Player", _score, _mode, DateTime.Now);

            _scoreService.AddScore(score);
        }
    }


    string RenderGame(GameMode game)
    {
        var stringBuilder = MazeToSvg(game.CurrentMaze);
        var start = game.currentEndpoints.Item1;
        var end = game.currentEndpoints.Item2;

        stringBuilder.AppendLine($@"{'\t'}<rect class=""start"" fill=""#bbb"" stroke=""#24292e"" stroke-width=""0"" width="".6"" height="".6"" x=""{start.Item2 * 3 + 1.2}"" y=""{start.Item1 * 3 + 1.2}""/>");
        stringBuilder.AppendLine($@"{'\t'}<rect class=""end"" fill=""#323232"" stroke=""#24292e"" stroke-width=""0"" width="".6"" height="".6"" x=""{end.Item2 * 3 + 1.2}"" y=""{end.Item1 * 3 + 1.2}""/>");

        foreach (var racer in game.Racers)
        {
            if (racer.ZCoord == game.Racers[0].ZCoord && racer.Name.Equals("Computer"))
            {
                stringBuilder.AppendLine($@"{'\t'}<rect class=""player"" fill=""#dc143c"" stroke=""#24292e"" stroke-width=""0"" width="".6"" height="".6"" x=""{racer.YCoord * 3 + 1.2}"" y=""{racer.XCoord * 3 + 1.2}""/>");
            }

            else if (racer.Name.Equals("Player"))
            {
                stringBuilder.AppendLine($@"{'\t'}<rect class=""player"" fill=""#7abafc"" stroke=""#24292e"" stroke-width=""0"" width="".6"" height="".6"" x=""{racer.YCoord * 3 + 1.2}"" y=""{racer.XCoord * 3 + 1.2}""/>");
            }
        }

        stringBuilder.AppendLine(@"</svg>");
        stringBuilder.AppendLine();
        return stringBuilder.ToString();
    }


    StringBuilder MazeToSvg(Cell[,] maze)
    {
        var height = maze.GetLength(0);
        var width = maze.GetLength(1);

        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine();
        stringBuilder.AppendLine($@"<svg width=""60vmin"" height=""60vmin"" viewBox=""0 0 {height * 3} {width * 3}"" preserveAspectRatio=""xMinYMin meet"" xmlns=""http://www.w3.org/2000/svg"" xmlns:svg=""http://www.w3.org/2000/svg"">");
        for (var i = 0; i < height; i++)
        {
            for (var j = 0; j < width; j++)
            {
    // corners
                {
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""1"" x=""{i * 3 + 0}"" y=""{j * 3 + 0}""/>");
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""1"" x=""{i * 3 + 2}"" y=""{j * 3 + 0}""/>");
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""1"" x=""{i * 3 + 0}"" y=""{j * 3 + 2}""/>");
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""1"" x=""{i * 3 + 2}"" y=""{j * 3 + 2}""/>");
                }

    // sides
                if (maze[j, i].Walls[(int) Walls.Top])
                {
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""3"" height=""1"" x=""{i * 3 + 0}"" y=""{j * 3 + 0}""/>");
                }
                if (maze[j, i].Walls[(int) Walls.Bottom])
                {
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""3"" height=""1"" x=""{i * 3 + 0}"" y=""{j * 3 + 2}""/>");
                }
                if (maze[j, i].Walls[(int) Walls.Left])
                {
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""3"" x=""{i * 3 + 0}"" y=""{j * 3 + 0}""/>");
                }
                if (maze[j, i].Walls[(int) Walls.Right])
                {
                    stringBuilder.AppendLine($@"{'\t'}<rect fill=""#24292e"" stroke=""#24292e"" stroke-width=""0"" width=""1"" height=""3"" x=""{i * 3 + 2}"" y=""{j * 3 + 0}""/>");
                }
            }
        }

        return stringBuilder;
    }

    string RenderMaze(Cell[,] maze)
    {
        var builder = MazeToSvg(maze);
        builder.AppendLine(@"</svg>");
        builder.AppendLine();
        return builder.ToString();
    }
}